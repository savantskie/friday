
[2025-05-04 14:41:43] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,7 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +19,14 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 14:41:52] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,7 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +19,14 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 14:44:11] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,7 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +19,16 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+    
+    long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 14:46:32] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,6 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +18,17 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 14:48:23] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,6 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +18,16 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 14:49:43] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,6 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +18,23 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        print("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 14:49:43] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,6 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +18,23 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        print("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 14:49:56] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,6 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +18,23 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        print("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 14:49:56] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,6 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +18,23 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        print("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")

[2025-05-04 15:18:45] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,6 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +18,23 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        print("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")
@@ -46,7 +61,8 @@
 
 # Print and log check results
 print(check_results)
-add_to_memory("assistant", check_results)
+summary = "No changes found." if not check_results[0] else "Differences detected. Summary:\n" + "\n".join(line for line in check_results[0] if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---")))
+add_to_memory("assistant", summary)
 
 # Optional user response to log a two-sided memory record
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
@@ -55,14 +71,17 @@
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
+                diffs, _ = run_code_check()
 
-                if "No changes detected" in check_results:
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])  # First 10 lines
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
 
                 print(f"Friday: {message}")
+                add_to_memory("assistant", message)
                 save_to_memory("assistant", message)
 
             except Exception as e:
@@ -72,6 +91,7 @@
 
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
+
 
 
 

[2025-05-04 15:18:45] Code Comparison Run:
--- backup
+++ current
@@ -9,8 +9,6 @@
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -20,6 +18,23 @@
         except Exception as e:
             print("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        print("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
 
 # --- STARTUP LOGIC ---
 print("Initializing core systems...")
@@ -46,7 +61,8 @@
 
 # Print and log check results
 print(check_results)
-add_to_memory("assistant", check_results)
+summary = "No changes found." if not check_results[0] else "Differences detected. Summary:\n" + "\n".join(line for line in check_results[0] if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---")))
+add_to_memory("assistant", summary)
 
 # Optional user response to log a two-sided memory record
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
@@ -55,14 +71,17 @@
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
+                diffs, _ = run_code_check()
 
-                if "No changes detected" in check_results:
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])  # First 10 lines
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
 
                 print(f"Friday: {message}")
+                add_to_memory("assistant", message)
                 save_to_memory("assistant", message)
 
             except Exception as e:
@@ -72,6 +91,7 @@
 
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
+
 
 
 

[2025-05-04 20:20:02] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,95 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
+    except Exception as e:
+        friday_speak(f"[Display Output Error] {e}")
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +113,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +120,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
+
+# Start periodic code integrity checks
+schedule_integrity_checks()
 
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    check_code_integrity()
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = process_input(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 20:20:02] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,95 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
+    except Exception as e:
+        friday_speak(f"[Display Output Error] {e}")
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +113,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +120,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
+
+# Start periodic code integrity checks
+schedule_integrity_checks()
 
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    check_code_integrity()
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = process_input(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 20:20:02] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,95 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
+    except Exception as e:
+        friday_speak(f"[Display Output Error] {e}")
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +113,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +120,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
+
+# Start periodic code integrity checks
+schedule_integrity_checks()
 
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    check_code_integrity()
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = process_input(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 20:26:22] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,95 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
+    except Exception as e:
+        friday_speak(f"[Display Output Error] {e}")
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +113,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +120,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
+
+# Start periodic code integrity checks
+schedule_integrity_checks()
 
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    check_code_integrity()
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = process_input(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 20:26:22] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,95 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
+    except Exception as e:
+        friday_speak(f"[Display Output Error] {e}")
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +113,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +120,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
+
+# Start periodic code integrity checks
+schedule_integrity_checks()
 
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    check_code_integrity()
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = process_input(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 20:26:22] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,95 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
+    except Exception as e:
+        friday_speak(f"[Display Output Error] {e}")
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +113,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +120,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
+
+# Start periodic code integrity checks
+schedule_integrity_checks()
 
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    check_code_integrity()
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = process_input(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 21:14:44] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,93 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +111,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +118,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 21:14:44] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,93 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +111,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +118,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 21:17:17] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,93 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +111,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +118,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-04 21:25:43] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,12 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +17,93 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak("Failed to load long-term memory:", e)
     return []
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
+
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +111,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +118,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 00:14:39] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,92 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+        
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +112,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +119,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 00:15:01] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,92 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # Append message to display output with timestamp
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+        
+    
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,7 +112,6 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
 long_term_memory = load_long_term_memory()
 
 def ask_friday(user_input):
@@ -99,58 +119,75 @@
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 00:40:12] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,92 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +112,82 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 00:42:08] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,92 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+summary = (
+    "No changes found."
+    if not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
 
-# Optional user response to log a two-sided memory record
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +112,82 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 11:08:50] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,97 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
 
-# Optional user response to log a two-sided memory record
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +117,82 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 11:08:50] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,97 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
 
-# Optional user response to log a two-sided memory record
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +117,82 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 11:09:50] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,97 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
 
-# Optional user response to log a two-sided memory record
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +117,82 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 11:42:47] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,97 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
 
-# Optional user response to log a two-sided memory record
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +117,82 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 12:19:56] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,97 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
 
-# Optional user response to log a two-sided memory record
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +117,82 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 12:25:30] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,97 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
 
-# Optional user response to log a two-sided memory record
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                diffs, _ = run_code_check()
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +117,82 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
+def get_greeting():
+    return "Friday is online."
+    
 # Start periodic code integrity checks
 schedule_integrity_checks()
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
+                with conn:
+                    # Now it's safe to speak — the display is connected
+                    friday_speak("Display connection established.")
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
 
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
     except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 12:36:53] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,101 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                result = run_code_check()
+                if not result:
+                    friday_speak("Integrity check returned no data.")
+                    return
+                diffs = result[0]  # Safely get the diffs list
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +121,85 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
+def get_greeting():
+    return "Friday is online."
+    
+
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
+    # Start periodic code integrity checks
+    schedule_integrity_checks()
+    
+    
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
-
                 with conn:
-                    print(f"Friday: Connection established with {addr}")
+                    # Now it's safe to speak — the display is connected
+                    # run_code_check()  # Removed to prevent duplicate checks
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
+
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
+    except Exception as e:
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 12:42:31] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,101 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                result = run_code_check()
+                if not result:
+                    friday_speak("Integrity check returned no data.")
+                    return
+                diffs = result[0]  # Safely get the diffs list
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +121,85 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
+def get_greeting():
+    return "Friday is online."
+    
+
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
+    # Start periodic code integrity checks
+    schedule_integrity_checks()
+    
+    
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
-
                 with conn:
-                    print(f"Friday: Connection established with {addr}")
+                    # Now it's safe to speak — the display is connected
+                    # run_code_check()  # Removed to prevent duplicate checks
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
+
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
+    except Exception as e:
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 12:51:11] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,101 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                result = run_code_check()
+                if not result:
+                    friday_speak("Integrity check returned no data.")
+                    return
+                diffs = result[0]  # Safely get the diffs list
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +121,85 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
+def get_greeting():
+    return "Friday is online."
+    
+
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
+    # Start periodic code integrity checks
+    schedule_integrity_checks()
+    
+    
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
-
                 with conn:
-                    print(f"Friday: Connection established with {addr}")
+                    # Now it's safe to speak — the display is connected
+                    # run_code_check()  # Removed to prevent duplicate checks
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
+
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
+    except Exception as e:
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 12:59:18] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,101 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                result = run_code_check()
+                if not result:
+                    friday_speak("Integrity check returned no data.")
+                    return
+                diffs = result[0]  # Safely get the diffs list
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +121,85 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
+def get_greeting():
+    return "Friday is online."
+    
+
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
+    # Start periodic code integrity checks
+    schedule_integrity_checks()
+    
+    
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
-
                 with conn:
-                    print(f"Friday: Connection established with {addr}")
+                    # Now it's safe to speak — the display is connected
+                    # run_code_check()  # Removed to prevent duplicate checks
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
+
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
+    except Exception as e:
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 13:11:08] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,101 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                result = run_code_check()
+                if not result:
+                    friday_speak("Integrity check returned no data.")
+                    return
+                diffs = result[0]  # Safely get the diffs list
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +121,85 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
+def get_greeting():
+    return "Friday is online."
+    
+
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
+    # Start periodic code integrity checks
+    schedule_integrity_checks()
+    
+    
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
-
                 with conn:
-                    print(f"Friday: Connection established with {addr}")
+                    # Now it's safe to speak — the display is connected
+                    # run_code_check()  # Removed to prevent duplicate checks
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
+
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
+    except Exception as e:
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 14:08:10] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,101 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                result = run_code_check()
+                if not result:
+                    friday_speak("Integrity check returned no data.")
+                    return
+                diffs = result[0]  # Safely get the diffs list
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +121,85 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
+def get_greeting():
+    return "Friday is online."
+    
+
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
+    # Start periodic code integrity checks
+    schedule_integrity_checks()
+    
+    
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
-
                 with conn:
-                    print(f"Friday: Connection established with {addr}")
+                    # Now it's safe to speak — the display is connected
+                    # run_code_check()  # Removed to prevent duplicate checks
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
+
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
+    except Exception as e:
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 14:08:50] Code Comparison Run:
--- backup
+++ current
@@ -4,13 +4,14 @@
 import socket
 import threading
 import time
+from datetime import datetime
 from integrity.code_check import run_code_check  # Make sure this matches the actual function name
 
 base_folder = os.path.dirname(os.path.abspath(__file__))
 long_term_memory_file = os.path.join(base_folder, 'memory.txt')
 short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
+
+
 
 def load_long_term_memory():
     if os.path.exists(long_term_memory_file):
@@ -18,72 +19,101 @@
             with open(long_term_memory_file, 'r', encoding='utf-8') as f:
                 return json.load(f)
         except Exception as e:
-            print("Failed to load long-term memory:", e)
+            friday_speak(f"Failed to load long-term memory: {e}")
     return []
+    
+def add_to_memory(role, content):
+    short_term_memory.append({"role": role, "content": content})
+
+def save_to_memory(role, content):
+    long_term_memory.append({"role": role, "content": content})
+    save_long_term_memory(long_term_memory)
+    
+def friday_speak(message):
+    print(f"Friday: {message}")  # Console/debug print
+    add_to_memory("assistant", message)
+    save_to_memory("assistant", message)
+
+    # ✅ Define timestamp before writing
+    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as out_file:
+            out_file.write(f"{timestamp} {message}\n")
+    except Exception as e:
+        print(f"[Display Output Error] {e}")
+
+       
+def save_long_term_memory(memory_data):
+    try:
+        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
+            json.dump(memory_data, f, indent=2)
+    except Exception as e:
+        friday_speak("Failed to save long-term memory:", e)
+
+# ✅ Initialize global memory right here:
+long_term_memory = load_long_term_memory()
 
 # --- STARTUP LOGIC ---
-print("Initializing core systems...")
+friday_speak("Initializing core systems...")
 add_to_memory("assistant", "Initializing core systems...")
 
 # Run integrity check
 from integrity.code_check import run_code_check
 check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
+message = f"I ran a routine integrity scan and found the following:{check_results}"
+friday_speak(message)
 save_to_memory("assistant", message)
 
-# Construct startup greeting
 startup_message = (
     "System online. Memory loaded and operational.\n"
     "Running self-integrity check for core systems..."
 )
-print(startup_message)
+friday_speak(startup_message)
 add_to_memory("assistant", startup_message)
 
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
+# Fixed line 78
+if check_results is None or len(check_results) == 0:
+    friday_speak("No differences found.")
+else:
+    friday_speak("\n".join(check_results[0]) if check_results[0] else "No differences found.")
+
+summary = (
+    "No changes found."
+    if not check_results or not check_results[0]
+    else "Differences detected. Summary:\n" +
+         "\n".join(
+             line for line in check_results[0]
+             if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))
+         )
+)
+friday_speak(summary)
+
+
 add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
 
 def schedule_integrity_checks():
     def loop_checks():
         while True:
             try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
+                result = run_code_check()
+                if not result:
+                    friday_speak("Integrity check returned no data.")
+                    return
+                diffs = result[0]  # Safely get the diffs list
+                if not diffs:
                     message = "I ran a routine integrity scan. All systems are stable — no changes were found."
                 else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
+                    summary_lines = [line for line in diffs if line.startswith(("+", "-", "@")) and not line.startswith(("+++", "---"))]
+                    summary_snippet = "\n".join(summary_lines[:10])
+                    message = f"I ran a routine integrity scan and found the following:\n{summary_snippet}\n(Changes trimmed for brevity)"
+                friday_speak(message)
             except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
+                friday_speak(f"[ERROR] Integrity check failed: {e}")
+            time.sleep(3 * 60 * 60)
     t = threading.Thread(target=loop_checks, daemon=True)
     t.start()
 
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
 def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
     for msg in short_term:
         if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
             long_term.append(msg)
@@ -91,66 +121,85 @@
             long_term.append(msg)
     return long_term
 
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
+
 
 def ask_friday(user_input):
     global short_term_memory
     messages = long_term_memory + short_term_memory
     messages.append({"role": "user", "content": user_input})
 
+    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
+
+    # Echo user input to display
+    try:
+        with open("display_output.txt", "a", encoding="utf-8") as f:
+            f.write(f"{timestamp} User: {user_input}\n")
+    except Exception as e:
+        print(f"[Display Output Error - User] {e}")
+
     try:
         response = ollama.chat(model="llama3", messages=messages)
         reply = response["message"]["content"]
         short_term_memory.append({"role": "user", "content": user_input})
         short_term_memory.append({"role": "assistant", "content": reply})
+
+        # Echo Friday's response to display
+        try:
+            with open("display_output.txt", "a", encoding="utf-8") as f:
+                f.write(f"{timestamp} Friday: {reply}\n")
+        except Exception as e:
+            print(f"[Display Output Error - Assistant] {e}")
+
         return reply
     except Exception as e:
         import traceback
         traceback.print_exc()
         return f"[Error: {e}]"
 
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
+def get_greeting():
+    return "Friday is online."
+    
+
 
 if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
+    # Start periodic code integrity checks
+    schedule_integrity_checks()
+    
+    
     HOST = '127.0.0.1'
     PORT = 5050
+    print("Socket server initializing...")  # Console-only log
 
     try:
         with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
             s.bind((HOST, PORT))
             s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
+            print(f"Listening on {HOST}:{PORT}")  # Still silent to display
             while True:
                 try:
                     conn, addr = s.accept()
                 except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
+                    print(f"Socket accept failed — {e}")
                     break
-
                 with conn:
-                    print(f"Friday: Connection established with {addr}")
+                    # Now it's safe to speak — the display is connected
+                    # run_code_check()  # Removed to prevent duplicate checks
+                    run_code_check()
+# You can summarize or skip entirely if already done at the top
+                    greeting = get_greeting()
+                    if greeting:
+                        friday_speak(greeting)
+
                     while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
+                        data = conn.recv(1024)
+                        if not data:
                             break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
+                        user_input = data.decode("utf-8").strip().lower()
+                        if user_input == "end session":
+                            friday_speak("Ending session. Goodbye.")
+                            conn.sendall(b"Session ended.")
+                            break
+                        response = ask_friday(user_input)
+                        conn.sendall(response.encode("utf-8"))
+    except Exception as e:
+        friday_speak(f"Socket server error: {e}")

[2025-05-05 15:07:10] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 18:16:17] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 18:16:17] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 18:16:55] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 18:24:39] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 18:29:16] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 18:55:48] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 18:55:48] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 18:56:50] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 19:01:57] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 19:07:38] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 21:32:35] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 21:32:35] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 21:34:25] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 21:42:19] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 21:51:44] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 22:38:25] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 22:38:25] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 22:40:24] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 22:47:12] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 22:56:10] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 23:01:54] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-05 23:02:18] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:11:41] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:11:41] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:11:41] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:18:40] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:18:40] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:22:05] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:22:05] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:22:05] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:24:56] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:24:56] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:24:59] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:32:55] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 08:33:00] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 11:05:10] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 11:05:15] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-06 13:18:32] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 10:53:37] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 10:54:38] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 11:07:31] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 11:07:51] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 11:10:30] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 11:11:29] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 11:12:46] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 11:13:31] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 11:14:20] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 11:45:07] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 12:28:05] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 12:28:11] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 12:33:37] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 12:34:24] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 13:53:15] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 13:54:41] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 14:00:05] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 14:02:16] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 14:12:12] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 14:39:48] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 14:40:47] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 15:02:12] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 15:03:10] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:08:39] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:09:02] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:10:19] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:11:43] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:20:32] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:21:31] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:21:58] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:35:33] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:36:03] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:39:15] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:39:58] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 18:45:18] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:01:23] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:02:01] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:12:07] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:12:30] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:17:57] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:24:33] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:39:09] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:39:51] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:47:01] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 19:48:22] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 22:27:21] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 22:28:31] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 22:32:28] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")

[2025-05-07 22:49:59] Code Comparison Run:
--- backup
+++ current
@@ -1,156 +0,0 @@
-import os
-import json
-import ollama
-import socket
-import threading
-import time
-from integrity.code_check import run_code_check  # Make sure this matches the actual function name
-
-base_folder = os.path.dirname(os.path.abspath(__file__))
-long_term_memory_file = os.path.join(base_folder, 'memory.txt')
-short_term_memory = []
-schedule_integrity_checks()
-run_code_check()  # Immediate startup check
-
-def load_long_term_memory():
-    if os.path.exists(long_term_memory_file):
-        try:
-            with open(long_term_memory_file, 'r', encoding='utf-8') as f:
-                return json.load(f)
-        except Exception as e:
-            print("Failed to load long-term memory:", e)
-    return []
-
-# --- STARTUP LOGIC ---
-print("Initializing core systems...")
-add_to_memory("assistant", "Initializing core systems...")
-
-# Run integrity check
-from integrity.code_check import run_code_check
-check_results = run_code_check()
-message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-# Print to console/chat
-print(f"Friday: {message}")
-
-# Send to memory log
-save_to_memory("assistant", message)
-
-# Construct startup greeting
-startup_message = (
-    "System online. Memory loaded and operational.\n"
-    "Running self-integrity check for core systems..."
-)
-print(startup_message)
-add_to_memory("assistant", startup_message)
-
-# Print and log check results
-print(check_results)
-add_to_memory("assistant", check_results)
-
-# Optional user response to log a two-sided memory record
-add_to_memory("user", "Thanks for checking your code. Let me know if anything ever seems off.")
-
-def schedule_integrity_checks():
-    def loop_checks():
-        while True:
-            try:
-                check_results = run_code_check()
-
-                if "No changes detected" in check_results:
-                    message = "I ran a routine integrity scan. All systems are stable — no changes were found."
-                else:
-                    message = f"I ran a routine integrity scan and found the following:\n{check_results}"
-
-                print(f"Friday: {message}")
-                save_to_memory("assistant", message)
-
-            except Exception as e:
-                print(f"[ERROR] Integrity check failed: {e}")
-
-            time.sleep(3 * 60 * 60)  # 3 hours in seconds
-
-    t = threading.Thread(target=loop_checks, daemon=True)
-    t.start()
-
-
-
-def save_long_term_memory(memory):
-    try:
-        with open(long_term_memory_file, 'w', encoding='utf-8') as f:
-            json.dump(memory, f, indent=2)
-    except Exception as e:
-        print("Failed to save long-term memory:", e)
-
-def reorganize_memory(short_term, long_term):
-    # Placeholder logic: only save meaningful assistant responses > 10 words
-    for msg in short_term:
-        if msg["role"] == "assistant" and len(msg["content"].split()) >= 10:
-            long_term.append(msg)
-        elif msg["role"] == "user":
-            long_term.append(msg)
-    return long_term
-
-# Read the full memory on startup to refamiliarize Friday with herself
-long_term_memory = load_long_term_memory()
-
-def ask_friday(user_input):
-    global short_term_memory
-    messages = long_term_memory + short_term_memory
-    messages.append({"role": "user", "content": user_input})
-
-    try:
-        response = ollama.chat(model="llama3", messages=messages)
-        reply = response["message"]["content"]
-        short_term_memory.append({"role": "user", "content": user_input})
-        short_term_memory.append({"role": "assistant", "content": reply})
-        return reply
-    except Exception as e:
-        import traceback
-        traceback.print_exc()
-        return f"[Error: {e}]"
-
-import socket
-
-# Start periodic code integrity checks
-schedule_integrity_checks()
-
-if __name__ == "__main__":
-    print("Friday: Socket server initializing...")
-    HOST = '127.0.0.1'
-    PORT = 5050
-
-    try:
-        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
-            s.bind((HOST, PORT))
-            s.listen()
-            print(f"Friday: Listening on {HOST}:{PORT}")
-
-            while True:
-                try:
-                    conn, addr = s.accept()
-                except OSError as e:
-                    print(f"Friday: Socket accept failed — {e}")
-                    break
-
-                with conn:
-                    print(f"Friday: Connection established with {addr}")
-                    while True:
-                        try:
-                            data = conn.recv(4096)
-                            if not data:
-                                break
-                            user_input = data.decode('utf-8')
-                            if user_input.strip().lower() == "end session":
-                                conn.sendall(b"Friday: Logging off and saving important memories...")
-                                final_memory = reorganize_memory(short_term_memory, long_term_memory)
-                                save_long_term_memory(final_memory)
-                                print("Friday: Session ended. Waiting for new connection...")
-                                break
-                            response = ask_friday(user_input)
-                            conn.sendall(response.encode('utf-8'))
-                        except Exception as e:
-                            print(f"Friday: Error during communication — {e}")
-                            break
-    except Exception as e:
-        print(f"Friday: Server crashed during startup — {e}")
